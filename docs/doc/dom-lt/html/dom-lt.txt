-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Lengauer-Tarjan graph dominators algorithm.
--   
--   The Lengauer-Tarjan graph dominators algorithm. Included are ways to
--   compute domination and post-domination relationships.
@package dom-lt
@version 0.2.3


-- | The Lengauer-Tarjan graph dominators algorithm.
--   
--   &lt;math&gt; Lengauer, Tarjan, <i>A Fast Algorithm for Finding
--   Dominators in a Flowgraph</i>, 1979.
--   
--   &lt;math&gt; Muchnick, <i>Advanced Compiler Design and
--   Implementation</i>, 1997.
--   
--   &lt;math&gt; Brisk, Sarrafzadeh, <i>Interference Graphs for Procedures
--   in Static Single</i> <i>Information Form are Interval Graphs</i>,
--   2007.
--   
--   <ul>
--   <li>Strictness</li>
--   </ul>
--   
--   Unless stated otherwise all exposed functions might fully evaluate
--   their input but are not guaranteed to do so.
module Data.Graph.Dom
type Node = Int
type Path = [Node]
type Edge = (Node, Node)
type Graph = IntMap IntSet
type Rooted = (Node, Graph)

-- | <i>Immediate dominators</i>. <i>O(|E|*alpha(|E|,|V|))</i>, where
--   <i>alpha(m,n)</i> is "a functional inverse of Ackermann's function".
--   
--   This Complexity bound assumes <i>O(1)</i> indexing. Since we're using
--   <tt>IntMap</tt>, it has an additional <i>lg |V|</i> factor somewhere
--   in there. I'm not sure where.
idom :: Rooted -> [(Node, Node)]

-- | <i>Immediate post-dominators</i>. Complexity as for <tt>idom</tt>.
ipdom :: Rooted -> [(Node, Node)]

-- | <i>Dominator tree</i>. Complexity as for <tt>idom</tt>.
domTree :: Rooted -> Tree Node

-- | <i>Post-dominator tree</i>. Complexity as for <tt>idom</tt>.
pdomTree :: Rooted -> Tree Node

-- | <i>Dominators</i>. Complexity as for <tt>idom</tt>
dom :: Rooted -> [(Node, Path)]

-- | <i>Post-dominators</i>. Complexity as for <tt>idom</tt>.
pdom :: Rooted -> [(Node, Path)]

-- | <i>Post-dominated depth-first search</i>.
pddfs :: Rooted -> [Node]

-- | <i>Reverse post-dominated depth-first search</i>.
rpddfs :: Rooted -> [Node]
fromAdj :: [(Node, [Node])] -> Graph
fromEdges :: [Edge] -> Graph
toAdj :: Graph -> [(Node, [Node])]
toEdges :: Graph -> [Edge]
asTree :: Rooted -> Tree Node
asGraph :: Tree Node -> Rooted
parents :: Tree a -> [(a, a)]
ancestors :: Tree a -> [(a, [a])]
instance GHC.Base.Functor (Data.Graph.Dom.S z s)
instance GHC.Base.Monad (Data.Graph.Dom.S z s)
instance GHC.Base.Applicative (Data.Graph.Dom.S z s)

module Data.Graph.Dom.Internal
newline :: [Char]

-- | For debugging only
asDotFile :: Graph -> String
